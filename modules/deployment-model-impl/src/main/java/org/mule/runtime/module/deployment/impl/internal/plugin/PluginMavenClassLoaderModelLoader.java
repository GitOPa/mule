/*
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.runtime.module.deployment.impl.internal.plugin;

import static java.lang.String.format;
import static java.nio.charset.Charset.defaultCharset;
import static org.apache.commons.io.FileUtils.deleteQuietly;
import static org.apache.commons.io.FileUtils.toFile;
import static org.apache.commons.io.FileUtils.writeStringToFile;
import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;
import static org.mule.runtime.core.api.config.bootstrap.ArtifactType.PLUGIN;
import static org.mule.runtime.deployment.model.api.artifact.ArtifactDescriptorConstants.MULE_LOADER_ID;
import static org.mule.tools.api.classloader.ClassLoaderModelJsonSerializer.deserialize;
import static org.mule.tools.api.classloader.ClassLoaderModelJsonSerializer.serialize;

import org.mule.maven.client.api.MavenClient;
import org.mule.runtime.api.exception.MuleRuntimeException;
import org.mule.runtime.core.api.config.bootstrap.ArtifactType;
import org.mule.runtime.module.artifact.api.descriptor.BundleDependency;
import org.mule.runtime.module.artifact.api.descriptor.BundleDescriptor;
import org.mule.runtime.module.artifact.api.descriptor.ClassLoaderModel;
import org.mule.runtime.module.deployment.impl.internal.maven.AbstractMavenClassLoaderModelLoader;
import org.mule.runtime.module.deployment.impl.internal.maven.ArtifactClassLoaderModelBuilder;
import org.mule.runtime.module.deployment.impl.internal.maven.HeavyweightClassLoaderModelBuilder;
import org.mule.runtime.module.deployment.impl.internal.maven.LightweightClassLoaderModelBuilder;
import org.mule.tools.api.classloader.model.Artifact;
import org.mule.tools.api.classloader.model.ArtifactCoordinates;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.locks.StampedLock;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class is responsible of returning the {@link BundleDescriptor} of a given plugin's location and also creating a
 * {@link ClassLoaderModel}
 *
 * @since 4.0
 */
public class PluginMavenClassLoaderModelLoader extends AbstractMavenClassLoaderModelLoader {

  private static final String CLASSLOADER_MODEL_AUTOGENERATED = "classloader-model.autogenerated";

  protected final Logger logger = LoggerFactory.getLogger(this.getClass());

  private StampedLock lock = new StampedLock();
  // TODO test to validate a look per file using striped from Guava

  public PluginMavenClassLoaderModelLoader(MavenClient mavenClient) {
    super(mavenClient);
  }

  @Override
  public String getId() {
    return MULE_LOADER_ID;
  }

  @Override
  protected void addArtifactSpecificClassloaderConfiguration(ArtifactClassLoaderModelBuilder classLoaderModelBuilder) {
    classLoaderModelBuilder.includeAdditionalPluginDependencies();
  }

  @Override
  protected ClassLoaderModel createLightPackageClassLoaderModel(File artifactFile, Map<String, Object> attributes,
                                                                ArtifactType artifactType) {
    return doCreateLightPackageClasLoaderModel(artifactFile, attributes, artifactType);
  }

  private ClassLoaderModel doCreateLightPackageClasLoaderModel(File artifactFile, Map<String, Object> attributes, ArtifactType artifactType) {
    long stamp = lock.writeLock();
    try {
      ClassLoaderModel classLoaderModel = super.createLightPackageClassLoaderModel(artifactFile, attributes, artifactType);
      writeHeavyClassLoaderModel(artifactFile, attributes, classLoaderModel);
      return classLoaderModel;
    }
    finally {
      lock.unlock(stamp);
    }
  }

  private void writeHeavyClassLoaderModel(File artifactFile, Map<String, Object> attributes, ClassLoaderModel classLoaderModel) {
    BundleDescriptor bundleDescriptor = (BundleDescriptor) attributes.get(BundleDescriptor.class.getName());
    org.mule.tools.api.classloader.model.ClassLoaderModel packagerClassLoaderModel =
            new org.mule.tools.api.classloader.model.ClassLoaderModel(
                    bundleDescriptor.getVersion(),
                    toPackagerArtifactCoordinates(bundleDescriptor));
    packagerClassLoaderModel.setDependencies(classLoaderModel.getDependencies().stream()
                                                     .map(bundleDependency -> new Artifact(toPackagerArtifactCoordinates(bundleDependency.getDescriptor()),
                                                                                           bundleDependency.getBundleUri()))
                                                     .collect(Collectors.toList()));

    File classLoaderModelFile = new File(artifactFile.getParentFile(), CLASSLOADER_MODEL_JSON_DESCRIPTOR);
    try {
      writeStringToFile(classLoaderModelFile,
                        serialize(packagerClassLoaderModel),
                        defaultCharset());
      // Set the same lastModified to check later if the mule-plugin.jar has been modified (case of SNAPSHOTS)
      classLoaderModelFile.setLastModified(artifactFile.lastModified());
    }
    catch (IOException e) {
      throw new MuleRuntimeException(createStaticMessage(
              format("Error while writing %s to the Maven local repository for artifact: %s",
                     CLASSLOADER_MODEL_JSON_DESCRIPTOR, artifactFile.getName())),
                                     e);
    }
    try {
      new File(artifactFile.getParentFile(), CLASSLOADER_MODEL_AUTOGENERATED).createNewFile();
    }
    catch (IOException e) {
      deleteQuietly(classLoaderModelFile);
      throw new MuleRuntimeException(createStaticMessage(
              format("Error while writing %s to the Maven local repository for artifact: %s",
                     CLASSLOADER_MODEL_AUTOGENERATED, artifactFile.getName())),
                                     e);
    }
  }


  @Override
  protected ClassLoaderModel createHeavyPackageClassLoaderModel(File artifactFile, Map<String, Object> attributes, ArtifactType artifactType) {
    Long stamp = null;
    boolean autogenerated = new File(artifactFile.getParentFile(), CLASSLOADER_MODEL_AUTOGENERATED).exists();
    if (autogenerated) {
      stamp = lock.readLock();
    }
    try {
      ClassLoaderModel classLoaderModel = super.createHeavyPackageClassLoaderModel(artifactFile, attributes, artifactType);
      if (!autogenerated) {
        return classLoaderModel;
      }

      for (URL url : classLoaderModel.getUrls()) {
        if (!toFile(url).exists()) {
          stamp = convertToWriteLock(stamp);
          return doCreateLightPackageClasLoaderModel(artifactFile, attributes, artifactType);
        }
      }

      for (BundleDependency bundleDependency : classLoaderModel.getDependencies()) {
        if (!isPresentBundleDependency(bundleDependency)) {
          stamp = convertToWriteLock(stamp);
          return doCreateLightPackageClasLoaderModel(artifactFile, attributes, artifactType);
        }
      }
      return classLoaderModel;
    }
    finally {
      if (stamp != null) {
        lock.unlock(stamp);
      }
    }
  }

  private long convertToWriteLock(long stamp) {
    long writeStamp = lock.tryConvertToWriteLock(stamp);
    if (writeStamp == 0L) {
      lock.unlockRead(stamp);
      stamp = lock.writeLock();
    }
    else {
      stamp = writeStamp;
    }
    return stamp;
  }

  private boolean isPresentBundleDependency(BundleDependency bundleDependency) {
    try {
      return toFile(bundleDependency.getBundleUri().toURL()).exists() && bundleDependency.getAdditionalDependencies().stream().allMatch(additionalDependency -> isPresentBundleDependency(additionalDependency))
             && bundleDependency.getTransitiveDependencies().stream().allMatch(transitiveDependency -> isPresentBundleDependency(transitiveDependency));
    }
    catch (MalformedURLException e) {
      throw new MuleRuntimeException(createStaticMessage(format("Error while reading bundle URI for %s", bundleDependency), e));
    }
  }

  @Override
  protected boolean isHeavyPackage(File artifactFile) {
    if (!super.isHeavyPackage(artifactFile)) {
      return false;
    }
    File classLoaderModelFileAutoGenerated = new File(artifactFile.getParentFile(), CLASSLOADER_MODEL_AUTOGENERATED);
    File classLoaderModelFile = getClassLoaderModelDescriptor(artifactFile);
    if (classLoaderModelFileAutoGenerated.exists()
        && classLoaderModelFile.exists()
        && classLoaderModelFile.lastModified() != artifactFile.lastModified()) {
      return false;
    }
    return true;
  }

  private ArtifactCoordinates toPackagerArtifactCoordinates(BundleDescriptor bundleDescriptor) {
    return new ArtifactCoordinates(bundleDescriptor.getGroupId(), bundleDescriptor.getArtifactId(), bundleDescriptor.getVersion(),
                                   bundleDescriptor.getType(), bundleDescriptor.getClassifier().orElse(null));
  }

  @Override
  public boolean supportsArtifactType(ArtifactType artifactType) {
    return artifactType.equals(PLUGIN);
  }

  @Override
  protected boolean includeProvidedDependencies(ArtifactType artifactType) {
    return false;
  }

  @Override
  protected File getClassLoaderModelDescriptor(File artifactFile) {
    return new File(artifactFile.getParent(), CLASSLOADER_MODEL_JSON_DESCRIPTOR);
  }


  @Override
  protected LightweightClassLoaderModelBuilder newLightweightClassLoaderModelBuilder(File artifactFile,
                                                                                     BundleDescriptor artifactBundleDescriptor,
                                                                                     MavenClient mavenClient,
                                                                                     Map<String, Object> attributes,
                                                                                     Set<BundleDependency> nonProvidedDependencies) {
    final LightweightClassLoaderModelBuilder lightweightClassLoaderModelBuilder =
        new LightweightClassLoaderModelBuilder(artifactFile, artifactBundleDescriptor, mavenClient, nonProvidedDependencies);
    configClassLoaderModelBuilder(lightweightClassLoaderModelBuilder, attributes);
    return lightweightClassLoaderModelBuilder;
  }

  @Override
  protected HeavyweightClassLoaderModelBuilder newHeavyWeightClassLoaderModelBuilder(File artifactFile,
                                                                                     BundleDescriptor artifactBundleDescriptor,
                                                                                     org.mule.tools.api.classloader.model.ClassLoaderModel packagerClassLoaderModel,
                                                                                     Map<String, Object> attributes) {
    final HeavyweightClassLoaderModelBuilder heavyweightClassLoaderModelBuilder =
        new HeavyweightClassLoaderModelBuilder(artifactFile, artifactBundleDescriptor, packagerClassLoaderModel);
    configClassLoaderModelBuilder(heavyweightClassLoaderModelBuilder, attributes);
    return heavyweightClassLoaderModelBuilder;
  }

  private void configClassLoaderModelBuilder(ArtifactClassLoaderModelBuilder classLoaderModelBuilder,
                                             Map<String, Object> attributes) {
    if (attributes instanceof PluginExtendedClassLoaderModelAttributes) {
      classLoaderModelBuilder.setDeployableArtifactDescriptor(((PluginExtendedClassLoaderModelAttributes) attributes)
          .getDeployableArtifactDescriptor());
    }
  }

  @Override
  protected org.mule.tools.api.classloader.model.ClassLoaderModel getPackagerClassLoaderModel(File classLoaderModelDescriptor) {
    return deserialize(classLoaderModelDescriptor);
  }
}
